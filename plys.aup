#include <ProcessConstants.au3>
#include <TrayConstants.au3>
#include <WinAPIHObj.au3>
#include <WinAPIProc.au3>
#include <WinAPISys.au3>
Opt("MustDeclareVars", 1)

; NOTE: rel_* - relative to InputFileDir, relrel_* - relative to rel_path

const Version = "0.4.0"
const PlysPathRegEx = _
        __Re(PathPart(@AutoItExe, "drive", "dir") . "Plys\plys.aup.au3")

enum IncludeDep = 2, MirIncludeDep = 1.5, ImportDep = 1

; Translation settings
const MainTokenDelim = Chr(0x0C)  ; form feed
const MiscTokenDelim = Chr(0x0B)  ; vertical tab
const LineNumCommentPrefix = @tab . @tab . "; #"
const LambdaNameLen = 36
const TabInSpaces = "    "
const PublicSuffixRegEx = "\*"
const NewSuffixLen = 2
const NameDelimRegEx = ":"

; Default Plys-file settings
; TODO: individual for each Plys-file
dim LambdaFunctions = False
dim NoDollarPrefix = True
dim ConstByDefault = True
dim CloseBlockByIndent = True
dim ImportKeyword = True
dim Synonyms = True

; Translator options
dim StdioExchange = True  ; TODO: move this switch to commandline
dim RunMode = True
dim ErrorStdOut = False
dim RapidMode = False
dim InputFilePath
dim InputFileDir
dim InputFileNameExt

; Table of dependencies
;    Array size: DepTable[n+1][n+1]
;    Array structure:
;       DepTable[0][0] = n                number of files
;       DepTable[1..n][0]                  relative path to file “n”
;       DepTable[0][1..n]                  names array of file “n”
;       DepTable[i][j] = include        file “i” includes file “j”
dim DepTable[1][1] = [[0]]

; Table of visibilities: which module sees names from which module
; Based on DepTable
dim ThruTable

dim PathsToDeleteOnExit[0]


if @ScriptName == "plys.aup" then Main()


func Main*()
    const scriptArgs = ProcessCmdLine()
    GetProjectSettings()

    TraySetIcon("stop")
    TraySetState(TRAY_ICONSTATE_FLASH)

    const rel_path = PathPart(InputFilePath, "name", "ext")
    GetDeps(DepTable, rel_path)
    if not RunMode then Echo("[Dependencies are get]" . @)

    if ImportKeyword then MakeThruTable()

    ProcessFiles()

    DepTable = 0
    if ImportKeyword then ThruTable = 0

    if RunMode then
        const pid = Run('"' . @AutoItExe _
                . (ErrorStdOut? '" /ErrorStdOut "' : '" "') . InputFilePath _
                . '.au3" ' . scriptArgs, "", default, _
                STDIN_CHILD + STDERR_CHILD + STDOUT_CHILD)
        if StdioExchange then
            Opt("TrayIconHide", 1)
            ProcessStdio(pid)


func ProcessCmdLine()
; @CmdLine = [0:n, 1:path, 2:args] or [0:n, 1:/ErrorStdOut, 2:path, 3:args]
    const pathIndex = _GetPathIndex()
    if pathIndex = 0 then
        InputFilePath = OpenDialog("Run Script:", @MyDocumentsDir, _
                "Plys script files (*.aup)|All files (*.*)")
        ; TODO: AutoIt script files (*.au3;*.a3x)
        if @error then exit
    else
        InputFilePath = @CmdLine[pathIndex]

    InputFileDir = PathPart(InputFilePath, "drive", "dir")
    InputFileNameExt = PathPart(InputFilePath, "name", "ext")

    const argc = @CmdLine[0] - pathIndex
    if argc = 0 then return ""
    dim argv[argc]
    for i = pathIndex + 1 to @CmdLine[0]
        argv[i - 2] = '"' . @CmdLine[i] . '"'
    return _ArrayToString(argv, " ")


func _GetPathIndex()
    if @CmdLine[0] = 0 then return 0
    for i = 1 to @CmdLine[0]
        if Left(@CmdLine[i], 1) <> "/" then exitloop
        switch @CmdLine[i]
            case "/Translate"
                RunMode = False
            case "/ErrorStdOut"
                ErrorStdOut = True
            case "/Rapid"
                RapidMode = True
    return i


func GetProjectSettings()
    const text = Read(InputFilePath)
    StdioExchange = StdioExchange _
            and not ReFind(text, "(?m)^\#plys nostdio")
    LambdaFunctions = LambdaFunctions _
            or ReFind(text, "(?m)^\#plys lambda")
    NoDollarPrefix = NoDollarPrefix _
            and not ReFind(text, "(?m)^\#plys dollarprefix")
    ConstByDefault = ConstByDefault _
            and not ReFind(text, "(?m)^\#plys noconst")
    CloseBlockByIndent = CloseBlockByIndent _
            and not ReFind(text, "(?m)^\#plys noindent")
    ImportKeyword = ImportKeyword _
            and not ReFind(text, "(?m)^\#plys noimport")
    Synonyms = Synonyms _
            and not ReFind(text, "(?m)^\#plys nosynonyms")


;··············································································
func GetDeps(dim byref DepTable, rel_path)
; Search all #include and #import paths in rel_path file, add module numbers
; into DepTable and recursively process this dependencies.
;··············································································
    dim text = Read(InputFileDir . "\" . rel_path)

    ; append and init new module cells
    const module = DepTable[0][0] + 1
    redim DepTable[module + 1][module + 1]
    DepTable[0][0] = module
    DepTable[module][0] = rel_path
    DepTable[0][module] = _FindNames(text)
    
    const relrel_includes = _
            ReFind(text, '(?m)^\s*\#include\s+"(.+?)"', @ReArrayGlobal)
    const importEnabled = _
            ImportKeyword and PathPart(rel_path, "ext") = ".aup"
    if importEnabled then
        const relrel_imports = _
                ReFind(text, '(?m)^\s*\#import\s+"(.+?)"', @ReArrayGlobal)
    text = ""
    const depTypes = [IncludeDep, ImportDep]
    dim relrel_deps, rel_dep, dep
    const rel_dirSlash = PathPart(rel_path, "dir")  ; current_file\directory\
    for depType in depTypes
        if depType = IncludeDep then
            relrel_deps = relrel_includes
        elseif importEnabled then
            relrel_deps = relrel_imports
        else
            continueloop
        if not IsArray(relrel_deps) then continueloop
        
        for relrel_dep in relrel_deps
            rel_dep = rel_dirSlash . relrel_dep
            dep = Search(DepTable, rel_dep, 1, default, _
                    default, default, default, 0)  ; from 1 element in col 0
            if dep = -1 then  ; new path
                GetDeps(DepTable, rel_dep)
                dep = Search(DepTable, rel_dep, 1, default, _
                        default, default, default, 0)  ; from 1st elem in col 0
            DepTable[module][dep] = depType
        
    next depType


func _FindNames(byref text)
    dim names = ReFind(text, _
            "(?im)^\s*func\s+([A-Za-z_]\w*" . PublicSuffixRegEx . "?)", _
            @ReArrayGlobal)
    if not IsArray(names) then
        dim names[0]
    dim varsDeclars
    if ConstByDefault then
        varsDeclars = ReFind(text, _
                "(?im)^(?:\s*global\s+)?(?:dim|const|enum)\s+(.*)", _
                @ReArrayGlobal)
    else
        varsDeclars = ReFind(text, "(?im)^\s*global\s+(.*)", @ReArrayGlobal)
    if IsArray(varsDeclars) then
        ; FIXME: "const $bar = foo(1, 2)" → ["$bar = foo(1", " 2)"]
        dim newNames
        for varsDeclar in varsDeclars
            for varDeclar in Split(varsDeclar, ",", @NoCount)
                ;newNames = ReFind _
                ;       (varDeclar, "(\$\w*)", @ReArrayGlobal)
                ;if IsArray(newNames) then Add(names, newNames[0])
                newNames = ReFind(varDeclar, _
                        "([\$A-Za-z_]\w*" . PublicSuffixRegEx . "?)", _
                        @ReArrayGlobal)
                if IsArray(newNames) then
                    Add(names, ReReplace(newNames[0], "^\w", "\$$0", 1))
    return Unique(names, 0, 0, 0, ARRAYUNIQUE_NOCOUNT)


;··············································································
func MakeThruTable()
;··············································································
    ThruTable = DepTable
    
    ; capture dependencies throught
    dim changed
    do
        changed = False
        for row = 1 to ThruTable[0][0]
            for col = 1 to ThruTable[0][0]
                switch ThruTable[row][col]
                    case IncludeDep ; ———————————————
                        ; “mirror” rule
                        if ThruTable[col][row] <= ImportDep then
                            ThruTable[col][row] = MirIncludeDep
                            changed = True
                        ; “chain” rule for column
                        for y = 1 to ThruTable[0][0]
                            if y <> col _
                                    and ThruTable[y][row] > ThruTable[y][col] _
                            then
                                ThruTable[y][col] = ThruTable[y][row]
                                changed = True
                    case ImportDep ; ————————————————
                        ; “chain” rule for column
                        for y = 1 to ThruTable[0][0]
                            if y <> col _
                                    and ThruTable[y][row] > ImportDep _
                                    and ThruTable[y][col] = "" _
                            then
                                ThruTable[y][col] = ImportDep
                                changed = True
                endswitch
            next col
        next row
    until not changed


;··············································································
func ProcessFiles()
;··············································································
    dim sourcePath, targetPath, isPlysFile
    dim mainText, miscTokens  ; storages for processing file data

    for module = 1 to DepTable[0][0]
        sourcePath = InputFileDir . "\" . DepTable[module][0]
        if not FileExists(sourcePath) then continueloop
        targetPath = PathPart(sourcePath, "drive", "ext") . ".au3"
        if RapidMode then
            if _OldSource(sourcePath, targetPath) then continueloop
        elseif RunMode then
            Add(PathsToDeleteOnExit, targetPath)
        isPlysFile = (PathPart(sourcePath, "ext") = ".aup")
        mainText = Read(sourcePath)

        if RunMode then _EnumerateLines(mainText)
        if isPlysFile and Synonyms and module = 1 then
            _AppendDefaultLibs(mainText)
        miscTokens = _SeparateMain(mainText)
        if isPlysFile then
            if CloseBlockByIndent then _CloseBlocks(mainText)
            if LambdaFunctions then
                Add(DepTable[0][module], _ProcessLambdas(mainText, miscTokens))
            if NoDollarPrefix then
                _AddVarPrefixes(mainText, DepTable[0][module])
            _RemoveAsterisks(mainText)
            if ConstByDefault then _ToggleDimConst(mainText)
        if ImportKeyword then
            _ProcessImports(miscTokens, module, isPlysFile)
            if DepTable[0][0] > 1 then _ReplaceOwnNames(mainText, module)
            _ReplaceNotOwnNames(mainText, module)
        _SubstituteMacros(mainText)
        if isPlysFile and Synonyms then
            _RenameSynonyms(mainText)
        _CombineTokens(mainText, miscTokens)

        FileDelete(targetPath)
        Write(targetPath, mainText)
        if RunMode then
            SetAttrib(targetPath, "+H")
        else
            Echo('[Writed] "' . targetPath . '"' . @)
    next module


func _OldSource(sourcePath, targetPath)
    return FileExists(targetPath) _
            and GetTime(sourcePath, 0, 1) < GetTime(targetPath, 0, 1)


func _EnumerateLines(dim byref text)
    text = Split(text, @, @EntireSplit + @NoCount)
    for i = 0 to UBound(text) - 1
        if not ReFind(text[i], "^\s*$") then
            text[i] .= LineNumCommentPrefix . (i + 1)
    text = _ArrayToString(text, @)


func _AppendDefaultLibs(dim byref text)
    text = ReReplace(text, "(?im)^(?!\#au)", _
            "#include <StringConstants.au3>" . @ _
            . "#include <Array.au3>" . @, 1); _
            ; . "#include <Function.au3>" . @, 1)


func _SeparateMain(dim byref txt)
    const miscPattern = "(?m)" _
        . "^\s*\#cs(?s:.*?)\#ce.*" _
        . "|^\s*\#comments-start(?s:.*?)\#comments-end.*" _
        . "|^\s*\#.*" _
        . '|"(?:[^"]|"")*"' _
        . "|'(?:[^']|'')*'" _
        . "|\s_\h*(?:;.*)?$" _
        . "|;.*" _
        . "|{.*?}"
    dim miscTokens = ReFind(txt, miscPattern, @ReArrayGlobal)
    if @error then
        dim miscTokens[0]
    txt = ReReplace(txt, miscPattern, MainTokenDelim)
    return miscTokens


;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
func _CloseBlocks(dim byref text)
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    text = ReReplace(text, "(?m:^|\G)\t", TabInSpaces)
    text = Split(text . @ . "end.", @, @EntireSplit + @NoCount)

    dim i = -1
    dim comments = False
    dim indentSize, prevIndentSize = 0
    dim statement, sttmnt
    dim closer, indent
    dim stack[0]
    while i + 1 <= UBound(text) - 1
        i += 1
        
        ; skip comments and directives (and empty lines)
        if ReFind(text[i], "^\s*($|;)") then continueloop
        if comments then
            if ReFind(text[i], "(?i)^\s*(\#ce|\#comments-end)") then
                comments = False
            continueloop
        if ReFind(text[i], "(?i)^\s*(\#cs|\#comments-start)") then
            comments = True
            continueloop
        ; if ReFind(text[i], "^\s*\#") then continueloop
        
        indentSize = Len(ReReplace(text[i], "^( *).*", "$1"))
        statement = ReReplace(text[i], "^ *(\w*).*", "$1")
        if ReFind(statement, "(?i)^(else)?if$") then
            for then_i = i to UBound(text) - 1
                if ReFind(text[then_i], "(?i)\bthen\b") then  ; with “then”
                    exitloop
            if ReFind(text[then_i], "(?i)\bthen\h.*?\S") then  ; with then expr
                statement = ""
        if indentSize < prevIndentSize then
        ; func __CloseOpenedBlocks _
        ;         (statement, indentSize, prevIndentSize, stack)
            sttmnt = statement
            for is = indentSize to prevIndentSize - 1
                if is > UBound(stack) - 1 then exitloop
                switch stack[is]
                    case "if"
                        if ReFind(sttmnt, "(?i)^else(if)?$") then
                            sttmnt = ""
                            continueloop
                        closer = "endif"
                    case "elseif"
                        if ReFind(sttmnt, "(?i)^else(if)?$") then continueloop
                        closer = "endif"
                    case "else"
                        closer = "endif"
                    case "select", "switch", "with", "func"
                        closer = "end" . stack[is]
                    case "for"
                        closer = "next"
                    case "while"
                        closer = "wend"
                    case else
                        continueloop
                indent = ""
                for k = 1 to is
                    indent .= " "
                if ReFind(text[i], "^" . indent . closer . "\b") then
                    ; FIXME: must be replace even if disabled closeBlock
                    text[i] = ReReplace(text[i], closer, closer . ";", 1)
                else
                    text[i] = indent . closer . @ . text[i]
            next is
            redim stack[indentSize]
        endif
        switch statement
            case "if", "elseif"
                i = then_i
                continuecase
            case "else", "select", "switch", "for", "while", "with", "func"
                redim stack[indentSize + 1]
                stack[indentSize] = statement
        prevIndentSize = indentSize
    wend
    text = _ArrayToString(text, @)
    text = ReReplace(text, "\Rend\.\s*(;.*)?$", "")


func _ProcessLambdas(dim byref mainText, dim byref miscTokens)
    dim names[UBound(miscTokens)]
    dim n = 0, lambdas = ""
    dim name, args, expr, lineNum
    for i = 0 to UBound(miscTokens) - 1
        if not ReFind(miscTokens[i], "^\{.*}$") then continueloop
        do
            name = ""
            for j = 1 to LambdaNameLen
                name .= Chr(Random(Asc("a"), Asc("z"), 1))
        until Search(names, name) = -1
        names[n] = name
        n += 1
        args = ReFind(miscTokens[i], "(?:\{)([^:]*)", @ReArray)[0]
        expr = ReFind(miscTokens[i], "(?::)([^}]+)", @ReArray)[0]
        mainText = Split(mainText, MainTokenDelim, @NoCount)
        mainText[i] .= name
        mainText = _ArrayToString(mainText, MainTokenDelim)
        miscTokens[i] = ""
        lineNum = LineNumCommentPrefix . (i + 1)
        lambdas .= @ . @ _
                . "func " . name . "(" . args . ")" . lineNum . @ _
                    . TabInSpaces . "return " . expr . lineNum . @ _
                . "endfunc" . @
    mainText .= lambdas
    redim names[n]
    return names


func _AddVarPrefixes(dim byref text, dim names)
    if IsArray(names) then
        names = _ArrayToString(names)
        names = ReReplace(names, "\|\$\w+\*?", "")  ; funcs only
        names = ReReplace(names, "\$\w+\*?\|", "")  ; funcs only
        if names <> "" then names = "|" . names
    else
        names = ""
    ; FIXME: call function, stored in variable: $foo($bar, $buz)
    text = ReReplace(text, "(?i)" _
            . "(?(?=" _  ; if look ahead one of this
            . "\b(_|and|byref|case|const|continuecase|continueloop|default|" _
            . "dim|do|else|elseif|endfunc|endif|endselect|endswitch|endwith|" _
            . "enum|exit|exitloop|false|for|func|global|if|in|local|next|" _
            . "not|null|or|redim|return|select|static|step|switch|then|to|" _
            . "true|until|volatile|wend|while|with" . names . ")\b" _
            . ")" _  ; then replace
            . " " _
            . "|" _  ; else it’s variable: replace
            . "(?<![\w@$])" _  ; ← previous isn’t [\w@$]
            . "[A-Za-z_]\w*" _  ; ↓ next isn’t call, scope (or continuation)
            . "(?!\w*(\s*\(|:[A-Za-z_]))" _  ;|\s*_\W))" _
            . ")", _
            "\$$0")  ; by this


func _RemoveAsterisks(dim byref text)
    text = ReReplace(text, "(?im)^(\s*func\s+)([A-Za-z_]\w*)" _
            . PublicSuffixRegEx, "$1$2")
    const varsDeclars = ReFind(text, "(?im)^" _
            . (ConstByDefault? _
                    "(?:\s*global\s+)?(?:dim|const|enum)" _
                    : "\s*global") _
            . "\s+(.*)", @ReArrayGlobal)
    if not IsArray(varsDeclars) then return
    ; FIXME: "const $bar = foo(1, 2)" → ["$bar = foo(1", " 2)"]
    dim newVarsDeclar, publicNames
    for varsDeclar in varsDeclars
        newVarsDeclar = varsDeclar
        for varDeclar in Split(varsDeclar, ",", @NoCount)
            publicNames = ReFind(varDeclar, _
                    "(\$\w+" . PublicSuffixRegEx . ")", _
                    @ReArrayGlobal)
            if not IsArray(publicNames) then continueloop
            newVarsDeclar = ReReplace(newVarsDeclar, _
                    "(\" . TrimRight(publicNames[0], 1) . ")" _
                    . PublicSuffixRegEx, "\1", 1)
        if newVarsDeclar <> varsDeclar then
            text = Replace(text, varsDeclar, newVarsDeclar)


func _ToggleDimConst(dim byref text)
    text = ReReplace(text, _
            "(?im)^(const|enum|static)\s+\$", "global $0")
    text = ReReplace(text, _
            "(?im)^(\s+)((?:const|enum|static)\s+\$)", "$1local $2")
    text = ReReplace(text, _
            "(?im)^dim(\s+\$)", "global$1")
    text = ReReplace(text, _
            "(?im)^(\s+)dim(\s+\$)", "$1local$2")
    dim funcDeclars = ReFind(text, "(?im)^\s*func\s+.*$", @ReArrayGlobal)
    if IsArray(funcDeclars) then
        dim newFuncDeclar, args, pos
        for funcDeclar in funcDeclars
            newFuncDeclar = funcDeclar
            args = ReReplace(funcDeclar, _
                    "(?i)\s*func\s+.*?\(\s*(.*)\s*\).*", "$1")
            if args = "" then continueloop
            args = Split(args, ",", @NoCount)
            for arg in args  ; insert “const”
                if not ReFind(arg, "\b(const|dim)\b") then
                    ReFind(arg, "[a-zA-Z_\$]", @ReArray)
                    pos = @extended - 2
                    newFuncDeclar = Replace(newFuncDeclar, arg, _
                            Left(arg, pos) . "const " . Mid(arg, pos + 1))
            newFuncDeclar = ReReplace _
                    (newFuncDeclar, "\bdim\s+", "")  ; delete “dim”
            text = Replace(text, funcDeclar, newFuncDeclar)


func _ProcessImports(dim byref miscTokens, module, isPlysFile)
    miscTokens = _ArrayToString(miscTokens, MiscTokenDelim)

    if isPlysFile then __PreventReimporting(miscTokens, module)
    
    ; replace “#include/#import "path\name.ext"”
    ; with “#include "path\%target_prefix%name.ext.au3"”
    miscTokens = ReReplace(miscTokens, _
            "((?:^|" . MiscTokenDelim . ')\s*)\#(?:include' _
            . (isPlysFile? "|import" : "") _
            . ')(\s+)"(.*?)"', _
            '$1#include$2"$3.au3"')

    miscTokens = Split(miscTokens, MiscTokenDelim, @NoCount)


func __PreventReimporting(dim byref text, module)
; comment #import if module including or importing alredy been
    const rel_dirSlash = PathPart(DepTable[module][0], "dir")
    dim relrel_dep, foundInPrev
    for dep = 1 to DepTable[0][0]
        if DepTable[module][dep] <> ImportDep then continueloop
        relrel_dep = DepTable[dep][0]
        if rel_dirSlash <> "" then
            relrel_dep = Replace(relrel_dep, rel_dirSlash, "")
        relrel_dep = ReReplace(relrel_dep, "[\\.^$[({+#]", "\\$0")
        text = ReReplace(text, _
                "(" . MiscTokenDelim . "\s*)" _
                . '(\#(?:include|import)\s+[<"]' _
                . relrel_dep . '[>"])', _
                "$1; PLYS $2")
        foundInPrev = False
        for prev = 1 to module - 1
            if DepTable[prev][dep] then
                foundInPrev = True
                exitloop
        if not foundInPrev then  ; uncomment first
            text = ReReplace(text, _
                    "(" . MiscTokenDelim . "\s*)" _
                    . '; PLYS (\#(?:include|import)\s+[<"]' _
                    . relrel_dep . '[>"])', _
                    "$1$2", 1)


func _ReplaceOwnNames(dim byref text, module)
    const names = DepTable[0][module]
    if not IsArray(names) then return
    ; purified filename
    dim prefix = PathPart(DepTable[module][0], "dir", "name")
    prefix = ReReplace(prefix, "\W", "_")
    ;~const suffix = GetTime(DepTable[module][0], 0, 1)
    ; TODO: put names into pattern (name|name|…)
    ; and replace it in one fell swoop
    for name in names
        if Left(name, 1) = "$" then  ; is variable
            text = ReReplace(text, _
                    "(?im)([^\w""'" . NameDelimRegEx . "]|^)\$(" _
                        . TrimLeft(name, 1) . ")([^\w""'])", _
                    "$1\$_" . prefix . "__$2$3")  ;~__" . suffix . "$3")
        else  ; is function
            prefix = ReReplace(prefix, "^[0-9]", "_$1")
            text = ReReplace(text, _
                    "(?im)([^\w""'\$" . NameDelimRegEx . "]|^)(" . name _
                    . ")([^\w""'])", _
                    "${1}_" . prefix . "__$2$3")  ;~__" . suffix . "$3")


;··············································································
func _ReplaceNotOwnNames(dim byref text, module)
; replace names from ThruTable[0][dep] in module file
;··············································································
    const depTypes = [ImportDep, IncludeDep, MirIncludeDep]
    dim names
    dim filename, prefix, varPrefix, isPublic
    for depType in depTypes
        for dep = 1 to DepTable[0][0]
            if ThruTable[module][dep] <> depType then continueloop
            names = DepTable[0][dep]
            if not IsArray(names) then continueloop
            ; purified filename
            filename = PathPart(DepTable[dep][0], "name")
            filename = ReReplace(filename, "\W", "_")
            prefix = PathPart(DepTable[dep][0], "dir")
            prefix = ReReplace(prefix, "\W", "_")
            prefix .= filename
            ;~suffix = GetTime(DepTable[dep][0], 0, 1)
            for name in names
                if Left(name, 1) = "$" then  ; is variable
                    name = TrimLeft(name, 1)
                    varPrefix = "\$"
                else
                    prefix = ReReplace(prefix, "^[0-9]", "_$1")
                    varPrefix = ""
                if ReFind(name, PublicSuffixRegEx . "$") then
                    name = TrimRight(name, 1)
                    isPublic = True
                else
                    isPublic = False
                if ThruTable[module][dep] <> ImportDep then
                    text = ReReplace(text, _
                            "(?im)([^\w""']|^)" . varPrefix . name _
                            . "([^\w""'])", _
                            "${1}" . varPrefix . "_" . prefix . "__" . name . "$2")  ;~ _
                            ;~. "__" . suffix . "$2")
                elseif isPublic then  ; ImportDep and isPublic
                    text = ReReplace(text, _
                            "(?im)([^\w""']|^)" . filename _
                            . NameDelimRegEx . varPrefix . name _
                            . "([^\w""'])", "${1}" . varPrefix . "_" . prefix _
                            . "__" . name . "$2")  ;~ . "__" . suffix . "$2")


func _SubstituteMacros(dim byref text)
    text = ReReplace(text, "(?i)@PlysPath\b", '"' . PlysPathRegEx . '"')
    text = ReReplace(text, "(?i)@PlysVersion\b", '"' . Version . '"')
    text = ReReplace(text, "(?i)@ScriptFullPath\b", _
            '"' . __Re(InputFilePath) . '"')
    text = ReReplace(text, "(?i)@ScriptName\b", _
            '"' . __Re(InputFileNameExt) . '"')


;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
func _RenameSynonyms(dim byref text)
; TODO: remove Get prefixes, move patterns to INI
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        text = ReReplace(text, "(?i)\bEcho\b", "ConsoleWrite")
        ; DllStruct ————————————————————————
        text = ReReplace(text, "(?i)\bStruct\b", "DllStructCreate")
        text = ReReplace(text, "(?i)\bStructGet\b", "DllStructGetData")
        text = ReReplace(text, "(?i)\bStructGetSize\b", "DllStructGetSize")
        text = ReReplace(text, "(?i)\bStructGetPtr\b", "DllStructGetPtr")
        text = ReReplace(text, "(?i)\bStructSet\b", "DllStructSetData")
        text = ReReplace(text, "(?i)\bIsStruct\b", "IsDllStruct")
        ; File —————————————————————————————
        text = ReReplace(text, "(?i)\b(" _
                . "ChangeDir|Copy|CreateShortcut|Flush|GetAttrib|" _
                . "GetEncoding|GetLongName|GetShortcut|GetShortName|GetSize|" _
                . "GetTime|GetVersion|Open|OpenDialog|Read|ReadLine|" _
                . "ReadToArray|Recycle|RecycleEmpty|SaveDialog|SelectFolder|" _
                . "SetAttrib|SetEnd|SetPos|SetTime|Write|WriteLine" _
                . ")\b", "File$1")
        text = ReReplace(text, "(?i)\bCreateLink\b", "FileCreateNTFSLink")
        text = ReReplace(text, "(?i)\bFirstFile\b", "FileFindFirstFile")
        text = ReReplace(text, "(?i)\bNextFile\b", "FileFindNextFile")
        ; **Close|**Delete|**Exists|**GetPos|Install|**Move
        ; String ———————————————————————————
        text = ReReplace(text, "(?i)\b(" _
                . "AddCR|Format|InStr|IsAlNum|IsAlpha|IsASCII|IsDigit|" _
                . "IsLower|IsSpace|IsUpper|IsXDigit|Left|Len|Lower|Mid|" _
                . "Replace|Right|Split|StripCR|StripWS|TrimLeft|TrimRight|" _
                . "Upper" _
                . ")\b", "String$1")
        text = ReReplace(text, "(?i)\bReFind\b", "StringRegExp")
        text = ReReplace(text, "(?i)\bReReplace\b", "StringRegExpReplace")
        ; Compare|FromASCIIArray|*IsFloat|*IsInt|**Reverse|ToASCIIArray
        ; Win ——————————————————————————————
        text = ReReplace(text, "(?i)\b(" _
                . "Activate|Active|Flash|GetCaretPos|GetClassList|" _
                . "GetClientSize|GetProcess|GetTitle|Kill|List|" _
                . "MenuSelectItem|MinimizeAll|MinimizeAllUndo|SetOnTop|" _
                . "SetTitle|SetTrans|Wait|WaitActive|WaitClose|WaitNotActive" _
                . ")\b", "Win$1")
        ; **Close|**Exists|*GetHandle|**GetPos|*GetState|*GetText|**Move
        ; |*SetState
        ; Macros ———————————————————————————
        text = ReReplace(text, "(?i)(@)(" _
                . "NoCaseSense|CaseSense|NoCaseSenseBasic|StripLeading|" _
                . "StripTrailing|StripSpaces|StripAll|ChrSplit|EntireSplit|" _
                . "NoCount|EndNotStart|UTF16|UCS2" _
                . ")\b", "$Str_$2")
        text = ReReplace(text, "(?i)(@Re)(" _
                . "Array|ArrayFull|ArrayGlobal|ArrayGlobalFull" _
                . ")\b", "$Str_RegExp$2Match")
        text = ReReplace(text, "(?i)@ReMatch\b", "$STR_REGEXPMATCH")
        text = ReReplace(text, "(?i)@ActiveWin\b", 'WinGetHandle("[ACTIVE]")')
        text = ReReplace(text, "(?i)@CmdLine\b", "$CmdLine")
        text = ReReplace(text, "@(\W)", "@CRLF$1")
        ; _Array ———————————————————————————
        text = ReReplace(text, "(?i)\b(" _
                . "Add|ColDelete|ColInsert|Combinations|Display|Extract|" _
                . "FindAll|Insert|Max|MaxIndex|Min|MinIndex|Permute|Pop|" _
                . "Push|Search|Shuffle|Sort|Swap|ToClip|Transpose|Trim|" _
                . "Unique" _
                . ")\b", "_Array$1")
        ; text = ReReplace(text, "(?i)\b(Filter|Map|Reduce)\b", "_Array$1")
        text = ReReplace(text, "(?i)\bToHistogram\b", "_Array1DToHistogram")
        text = ReReplace(text, "(?i)\bBinSearch\b", "_ArrayBinarySearch")
        text = ReReplace(text, "(?i)\bConcat\b", "_ArrayConcatenate")
        ; **Delete|**Reverse|*ToString
        ; ——————————————————————————————————
        text = ReReplace(text, "\.(\W)", "&$1")
        text = ReReplace(text, "\.=", "&=")


func _CombineTokens(dim byref mainText, byref miscTokens)
    mainText = Split(mainText, MainTokenDelim, @NoCount)
    dim text = ""
    for i = 0 to UBound(mainText) - 2
        text .= mainText[i] . miscTokens[i]
    mainText = text . mainText[i]


func ProcessStdio(pid)
    const proc = _WinAPI_OpenProcess( _
            (_WinAPI_GetVersion() >= 6.0)? _
            PROCESS_QUERY_LIMITED_INFORMATION _
            : PROCESS_QUERY_INFORMATION, 0, pid)
    const lastData = _WaitClose(pid)
    StdioClose(pid)
    if _WinAPI_GetExitCodeProcess(proc) = 0 then
        if not RapidMode then
            for path in PathsToDeleteOnExit
                FileDelete(path)
    elseif ErrorStdOut and lastData <> "" then
        ConsoleWrite(_FormatError(lastData))
    _WinAPI_CloseHandle(proc)


func _WaitClose(pid)
    dim timer = TimerInit()
    dim stdoutData, lastData = "", lastLoop = False
    while True
        StdinWrite(pid, ConsoleRead())
        ConsoleWriteError(StderrRead(pid))
        if ErrorStdOut then
            stdoutData = StdoutRead(pid)
            if stdoutData <> "" then lastData = stdoutData
            ConsoleWrite(stdoutData)
        else
            ConsoleWrite(StdoutRead(pid))
        if lastLoop then exitloop
        if TimerDiff(timer) > 300 then
            if not ProcessExists(pid) then lastLoop = True
            timer = TimerInit()
        GUIGetMsg()  ; prevents hogging of the CPU
    return lastData


func _FormatError(dim errorData)
    ; TODO: catch more than one error in message
    errorData = ReFind(errorData, '[^"]*("?)' _  ; 0: "
            . '([a-zA-Z]:\\.+?\.au[p3])' _  ; 1: C:\.aup
            . '(\.au3)' _  ; 2: .au3
            . '("? \()' _  ; 3: " (
            . '(\d+)' _  ; 4: line number
            . '(\) : ==> )' _  ; 5: ) : ==> 
            . '(.+?)\.: ?\R' _  ; 6: Message.:
            . '(.+\R)' _  ; 7: statemXnt
            . '(.*?)' _  ; 8: statem
            . '(\^ ERROR\R)?$', _  ; 9: ^ ERROR
            @ReArray)
    const line = ReadLine(errorData[1] . errorData[2], errorData[4])
    errorData[2] = ""
    errorData[4] = _
            ReReplace(line, ".*?" . LineNumCommentPrefix . "(\d+)$", "$1")
    errorData[6] .= ": " . TrimLeft(errorData[7], Len(errorData[8]))
    return _ArrayToString(errorData, "", 0, 6)



func PathPart(path, dim start="path", dim finish="")
; Select subpath from start to finish part
; if start="path" then returns original path
; if finish="" then returns start only
    const components = ["path", "drive", "dir", "name", "ext"]
    start = Search(components, start)
    if @error then start = 0
    finish = Search(components, finish)
    if @error then finish = start
    
    ; from _PathSplit (File.au3)
    dim split_ = ReFind(path, _
            "^\h*((?:\\\\\?\\)*(\\\\[^\?\/\\]+|[A-Za-z]:)?(.*[\/\\]\h*)?" _
            . "((?:[^\.\/\\]|(?(?=\.[^\/\\]*\.)\.))*)?([^\/\\]*))$", @ReArray)
    if @error then ; This error should never happen.
        redim split_[5]
        split_[0] = path
    split_[2] = ReReplace(split_[2], "\h*[\/\\]+\h*", _
            (Left(split_[2], 1) == "/")? "\/" : "\\")
    
    dim result = ""
    for i = start to finish
        result .= split_[i]
    return result
